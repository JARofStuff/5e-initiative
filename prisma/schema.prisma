// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Character {
    id         String  @id @default(cuid())
    name       String
    playerName String?

    type       CharacterType
    isFriendly Boolean       @default(true)
    isDead     Boolean       @default(false)

    createdById String
    createdBy   User   @relation(fields: [createdById], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    avatar           String?
    race             String?
    characterClass   String?
    subclass         String?
    level            Int     @default(0)
    experiencePoints Int     @default(0)
    hpMax            Int     @default(0)
    ac               Int     @default(0)
    spellSave        Int     @default(0)
    inspiration      Boolean @default(false)
    initiative       Int     @default(0)

    speedWalking   Int  @default(30)
    speedClimbing  Int? @default(0)
    speedFlying    Int? @default(0)
    speedSwimming  Int? @default(0)
    speedBurrowing Int? @default(0)

    creatureSize    String?
    creatureType    String?
    alignment       String?
    challengeRating String?
    source          String?

    str      Int     @default(10)
    strBonus Boolean
    dex      Int     @default(10)
    dexBonus Boolean
    con      Int     @default(10)
    conBonus Boolean
    int      Int     @default(10)
    intBonus Boolean
    wis      Int     @default(10)
    wisBonus Boolean
    cha      Int     @default(10)
    chaBonus Boolean

    skillAcrobaticsProficient     Boolean @default(false)
    skillAcrobaticsExpertise      Boolean @default(false)
    skillAnimalHandlingProficient Boolean @default(false)
    skillAnimalHandlingExpertise  Boolean @default(false)
    skillArcanaProficient         Boolean @default(false)
    skillArcanaExpertise          Boolean @default(false)
    skillAthleticsProficient      Boolean @default(false)
    skillAthleticsExpertise       Boolean @default(false)
    skillDeceptionProficient      Boolean @default(false)
    skillDeceptionExpertise       Boolean @default(false)
    skillHistoryProficient        Boolean @default(false)
    skillHistoryExpertise         Boolean @default(false)
    skillInsightProficient        Boolean @default(false)
    skillInsightExpertise         Boolean @default(false)
    skillIntimidationProficient   Boolean @default(false)
    skillIntimidationExpertise    Boolean @default(false)
    skillInvestigationProficient  Boolean @default(false)
    skillInvestigationExpertise   Boolean @default(false)
    skillMedicineProficient       Boolean @default(false)
    skillMedicineExpertise        Boolean @default(false)
    skillNatureProficient         Boolean @default(false)
    skillNatureExpertise          Boolean @default(false)
    skillPerceptionProficient     Boolean @default(false)
    skillPerceptionExpertise      Boolean @default(false)
    skillPerformanceProficient    Boolean @default(false)
    skillPerformanceExpertise     Boolean @default(false)
    skillPersuasionProficient     Boolean @default(false)
    skillPersuasionExpertise      Boolean @default(false)
    skillReligionProficient       Boolean @default(false)
    skillReligionExpertise        Boolean @default(false)
    skillSleightOfHandProficient  Boolean @default(false)
    skillSleightOfHandExpertise   Boolean @default(false)
    skillStealthProficient        Boolean @default(false)
    skillStealthExpertise         Boolean @default(false)
    skillSurvivalProficient       Boolean @default(false)
    skillSurvivalExpertise        Boolean @default(false)
}

enum CharacterType {
    PC
    NPC
}

model Creatures {
    id   String @id @default(cuid())
    name String

    fromSRD Boolean @default(false)

    createdById String?
    createdBy   User?   @relation(fields: [createdById], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    avatar String?

    creatureSize    String?
    creatureType    String?
    alignment       String?
    challengeRating String?
    source          String?

    hpMax   Int     @default(0)
    ac      Int     @default(0)
    hitDice String?

    speedWalking   Int  @default(30)
    speedClimbing  Int? @default(0)
    speedFlying    Int? @default(0)
    speedSwimming  Int? @default(0)
    speedBurrowing Int? @default(0)

    str Int @default(10)
    dex Int @default(10)
    con Int @default(10)
    int Int @default(10)
    wis Int @default(10)
    cha Int @default(10)

    savingThrows          CreatureSavingThrows[]
    skills                CreatureSkills[]
    conditionImmunities   CreatureConditionImmunities[]
    damageImmunities      CreatureDamageImmunities[]
    damageResistances     CreatureDamageResistances[]
    damageVulnerabilities CreatureDamageVulnerabilities[]
    senses                CreatureSenses[]
    languages             CreatureLanguages[]
}

model CreatureSavingThrows {
    id    String @id @default(cuid())
    type  String
    value String

    Creature   Creatures @relation(fields: [creatureId], references: [id], onDelete: Cascade)
    creatureId String
}

model CreatureSkills {
    id    String @id @default(cuid())
    type  String
    value String

    Creature   Creatures @relation(fields: [creatureId], references: [id], onDelete: Cascade)
    creatureId String
}

model CreatureSenses {
    id    String @id @default(cuid())
    type  String
    value String

    Creature   Creatures @relation(fields: [creatureId], references: [id], onDelete: Cascade)
    creatureId String
}

model CreatureConditionImmunities {
    id   String @id @default(cuid())
    type String

    Creature   Creatures @relation(fields: [creatureId], references: [id], onDelete: Cascade)
    creatureId String
}

model CreatureDamageImmunities {
    id   String @id @default(cuid())
    type String

    Creature   Creatures @relation(fields: [creatureId], references: [id], onDelete: Cascade)
    creatureId String
}

model CreatureDamageResistances {
    id   String @id @default(cuid())
    type String

    Creature   Creatures @relation(fields: [creatureId], references: [id], onDelete: Cascade)
    creatureId String
}

model CreatureDamageVulnerabilities {
    id   String @id @default(cuid())
    type String

    Creature   Creatures @relation(fields: [creatureId], references: [id], onDelete: Cascade)
    creatureId String
}

model CreatureLanguages {
    id        String                       @id @default(cuid())
    name      String
    level     CreatureLanguagesProficiency
    exception String?

    Creature   Creatures @relation(fields: [creatureId], references: [id], onDelete: Cascade)
    creatureId String
}

enum CreatureLanguagesProficiency {
    speaks
    understands
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    characters Character[]
    creatures  Creatures[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
